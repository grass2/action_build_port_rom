name: rom_Transplant_eng
on:
  workflow_dispatch:
    inputs:
      URL:
        description: "Download address of the system package to be ported"
        required: true
      OS_version:
        description: "The OS version number to be packaged (can be empty"
      Bottom_URL:
        description: "Download address of base package"
        required: true
      IMAGE_TYPE:
        description: "IMG format, erofs, ext are optional"
        required: true
        default: 'erofs'
        type: choice
        options:
        - erofs
        - ext
      EXT4_RW:
        description: 'Read and Write'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximizing the build environment
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 8192
          root-reserve-mb: 4096
          temp-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: Check out repository files
        uses: actions/checkout@main
      - name: -Prepare the environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          if [ -n "${{ github.event.inputs.OS_version }}" ]; then
              echo "OS_version=${{ github.event.inputs.OS_version }}" >> $GITHUB_ENV
          else
              echo "OS_version=$(echo "${{ github.event.inputs.URL }}" | cut -d'_' -f3)" >> $GITHUB_ENV
          fi
          echo "EXT4_RW=${{ github.event.inputs.EXT4_RW }}" >> $GITHUB_ENV
          echo "IMAGE_TYPE=${{ github.event.inputs.IMAGE_TYPE }}" >> $GITHUB_ENV
          echo "URL=${{ github.event.inputs.URL }}" >> $GITHUB_ENV
          echo "Bottom_URL=${{ github.event.inputs.Bottom_URL }}" >> $GITHUB_ENV
          sudo apt install python3 python3-pip aria2 zip p7zip-full tar zstd dos2unix
          sudo apt --fix-broken install
          sudo apt update --fix-missing
          pip3 install --upgrade pip
          pip3 install pycryptodome
          pip3 install setuptools
          pip3 install docopt
          pip3 install requests
          pip3 install beautifulsoup4
          pip3 install --ignore-installed pyyaml
      - name: -Make romsâ€Œ
        run: |
          sudo bash "$GITHUB_WORKSPACE"/make.sh ${URL} ${OS_version} ${GITHUB_WORKSPACE} $GITHUB_ENV ${Bottom_URL} ${IMAGE_TYPE} ${EXT4_RW}
      - name: Upload ROM
        run: |
          # Fetch the list of servers from the Gofile API
          servers=$(curl -s https://api.gofile.io/servers | jq -r '.data.servers[].name')
          if [[ $? -ne 0 || -z "$servers" ]]; then
              exit 1
          fi

          # Check if there are any servers
          if [[ -z "$servers" ]]; then
              exit 1
          fi

          # Choose a random server from the list
          server_array=($servers)
          random_index=$(( RANDOM % ${#server_array[@]} ))
          best_server=${server_array[$random_index]}

          # Upload the file to the selected server
          upload_response=$(curl -L -N -F "file=@${{ env.rom_path }}" "https://${best_server}.gofile.io/contents/uploadFile")
          if [[ $? -ne 0 ]]; then
              exit 1
          fi

          link_rom=$(echo "$upload_response" | jq -r .data.downloadPage)
          if [[ -z "$link_rom" || "$link_rom" == "null" ]]; then
              exit 1
          fi
          echo "Link Download: $link_rom"

          # Create or update the log file with details of the upload
          log_file="${GITHUB_WORKSPACE}/log.txt"
          touch "$log_file"
          chmod 777 "$log_file"
          {
              echo "- Official ROM: ${{ github.event.inputs.URL }}"
              echo "- ReHyper ROM: $link_rom"
              echo "- BuildType: ${{ github.event.inputs.BuildType }}"
              echo "- MD5: ${{ env.rom_md5 }}"
              echo "- Core patch: ${{ github.event.inputs.CorePatch }}"
              echo "- Build time: $(date +'%Y-%m-%d %H:%M:%S')"
              echo "- Note: ${{ github.event.inputs.Note }}"
          } >> "$log_file"

          # Set the version tag environment variable
          date=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "V_TAG=${{ env.device_name }}-${date}" >> $GITHUB_ENV

      - name: -Processing Package
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/GithubRelease
          cd "$GITHUB_WORKSPACE"/GithubRelease
          sudo split -b 1536M -d "$GITHUB_WORKSPACE"/zip/"${{ env.NEW_PACKAGE_NAME }}" "${{ env.NEW_PACKAGE_NAME }}"
      - name: -Upload to Github Release
        uses: ncipollo/release-action@main
        with:
          artifacts: "${{ github.workspace }}/GithubRelease/*"
          name: "${{ env.OS_version }}"
          tag: "${{ env.OS_version }}"
          bodyFile: "${{ github.workspace }}/file.log"
          allowUpdates: true
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}
